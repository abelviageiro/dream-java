package javareact.common.types.reactive;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.UUID;

import javareact.client.ClientEventForwarder;
import javareact.client.QueueManager;
import javareact.client.Subscriber;
import javareact.client.TrafficGeneratorPeerlet;
import javareact.common.Consts;
import javareact.common.expressions.ExpressionsHandler;
import javareact.common.packets.EventPacket;
import javareact.common.packets.content.Advertisement;
import javareact.common.packets.content.Attribute;
import javareact.common.packets.content.Event;
import javareact.common.packets.content.Subscription;
import javareact.common.packets.content.Value;
import javareact.common.types.Types;
import javareact.measurement.MeasurementLogger;
import protopeer.Peer;

public abstract class Reactive implements Subscriber {
  private final Map<String, Value> currentValues = new HashMap<String, Value>();
  private final Set<String> missingValues = new HashSet<String>();

  private final ClientEventForwarder forwarder;
  private final ExpressionsHandler expressionHandler;
  private final QueueManager queueManager = new QueueManager();

  private final Peer peer;
  private final boolean blocking;
  private final Types type;
  private final String name;
  private final boolean isPublic;

  private boolean hasValue;
  protected Value value;

  /**
   * Non-blocking reactive.
   * 
   * @param expression the expression that defines the reactive value.
   * @param startingValue the starting value to use until new updates are received.
   * @param type the type of the reactive.
   * @param name the name the reactive is publicly known with.
   */
  protected Reactive(Peer peer, String expression, Value startingValue, Types type, String name, boolean isPublic) {
    forwarder = (ClientEventForwarder) peer.getPeerletOfType(ClientEventForwarder.class);
    this.type = type;
    this.name = name;
    this.peer = peer;
    this.isPublic = isPublic;
    expressionHandler = new ExpressionsHandler(type, expression);
    value = startingValue;
    blocking = false;
    hasValue = true;
    initValues();
    subscribeAndAdvertise();
  }

  /**
   * Blocking reactive.
   * 
   * @param expression the expression that defines the reactive value.
   * @param type the type of the reactive.
   * @param name the name the reactive is publicly known with.
   */
  protected Reactive(Peer peer, String expression, Types type, String name, boolean isPublic) {
    forwarder = (ClientEventForwarder) peer.getPeerletOfType(ClientEventForwarder.class);
    this.type = type;
    this.name = name;
    this.peer = peer;
    this.isPublic = isPublic;
    expressionHandler = new ExpressionsHandler(type, expression);
    blocking = true;
    hasValue = false;
    initValues();
    subscribeAndAdvertise();
  }

  @Override
  public synchronized void notifyValueChanged(EventPacket evPkt) {
    // Update the data structures
    // Contact the queue manager to obtain the list of changes that can be processed
    Set<EventPacket> changes = queueManager.processEventPacket(evPkt, getHostNameDot() + name);
    boolean modified = updateDataStructures(changes);
    // If some data has been updated and no values are missing ...
    // ... recompute the expression and notify waiting threads
    // CHECK: what if some values are missing??
    if (modified && missingValues.isEmpty()) {
      // All the packets should have exactly the same id
      // (they have been generated by the same initial change)
      // Because of this, we take the id from the last arrived evPkt
      recomputeExpression(evPkt.getId(), getComputedFrom(changes), evPkt.getFinalExpressions(), evPkt.getCreationTime());
      if (blocking) {
        notifyAll();
      }
    }
  }

  /**
   * Update the data structures using the values carried by the given events. Return true iff any data structure was
   * modified.
   */
  private final boolean updateDataStructures(Collection<EventPacket> events) {
    boolean modified = false;
    for (EventPacket evPkt : events) {
      // Save event delay
      double delay = peer.getClock().getCurrentTime() - evPkt.getCreationTime();
      MeasurementLogger.getLogger().saveDelay(delay);
      Event ev = evPkt.getEvent();
      String observableId = ev.getObservableId();
      String hostId = ev.getHostId();
      for (Attribute attr : ev) {
        String methodName = attr.getName();
        String varName = hostId + "." + observableId + "." + methodName;
        if (currentValues.containsKey(varName) || missingValues.contains(varName)) {
          currentValues.remove(varName);
          missingValues.remove(varName);
          currentValues.put(varName, attr.getValue());
          modified = true;
        }
      }
    }
    return modified;
  }

  private final void initValues() {
    for (String var : expressionHandler.extractVariableNames(peer, type)) {
      missingValues.add(var);
    }
  }

  private final void subscribeAndAdvertise() {
    Set<Subscription> subs = expressionHandler.buildSubscriptions(peer, type);
    Advertisement adv = new Advertisement(name, getHostName());
    forwarder.advertise(adv, subs, isPublic);
    forwarder.addSubscriptions(this, subs);
  }

  /**
   * Recompute the expression and return true iff any new event has been generated.
   */
  private final boolean recomputeExpression(UUID id, Set<String> computedFrom, Set<String> finalExpressions, double timestamp) {
    boolean generateEvents = false;
    value = expressionHandler.evaluateExpression(peer, currentValues, type);
    hasValue = true;
    if (name != null) {
      try {
        Attribute attr = new Attribute("get()", value);
        Event event = new Event(name, getHostName(), attr);
        Set<String> newComputedFrom = new HashSet<String>(computedFrom);
        newComputedFrom.add(name);
        forwarder.sendEvent(id, event, newComputedFrom, finalExpressions, timestamp, true);
        generateEvents = true;
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    return generateEvents;
  }

  private final Set<String> getComputedFrom(Set<EventPacket> pkts) {
    Set<String> results = new HashSet<String>();
    for (EventPacket pkt : pkts) {
      results.addAll(pkt.getComputedFrom());
    }
    return results;
  }

  protected final void requiresUpdatedValue() {
    while (blocking && !hasValue) {
      try {
        this.wait();
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
    }
  }

  private String getHostName() {
    int clientId = ((TrafficGeneratorPeerlet) peer.getPeerletOfType(TrafficGeneratorPeerlet.class)).getClientId();
    return Consts.hostPrefix + clientId;
  }

  private String getHostNameDot() {
    int clientId = ((TrafficGeneratorPeerlet) peer.getPeerletOfType(TrafficGeneratorPeerlet.class)).getClientId();
    return Consts.hostPrefix + clientId + ".";
  }

}
